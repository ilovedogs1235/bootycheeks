botUsernames = '[NAME]'; function stringToUTF8Bytes(string){return new TextEncoder().encode(string)}; function bufferator3000(hex) { var typedArray = new Uint8Array(hex.match(/[\da-f]{2}/gi).map(function(h) { return parseInt(h, 16) })); return typedArray.buffer }; botsUsernames = Array.from(stringToUTF8Bytes(botUsernames), byte => byte.toString(16).padStart(2, '0')).join(''); console.log(botsUsernames); const loopTime = 2; for (let i = 0; i < loopTime; i++) { var a = new WebSocket(game.net.ws.url); a.protocol = game.net.ws.protocol; a.readyState = game.net.ws.readyState; a.url = game.net.ws.url; a.binaryType = 'arraybuffer'; a.bufferedAmount = 0; a.extensions = ''; a.onclose = game.net.ws.onclose; a.onerror = game.net.ws.onerror; a.onmessage = function(v) { if (v.data.byteLength > 99999999999999) { var hex = '1200000000B0E5A1' + `00${botsUsernames}` ; a.send(bufferator3000(hex)); setTimeout(function() {}, 100) } else if (v.data.byteLength > 1000) { var hex = '1200000000B0E5A1' + `00${botsUsernames}`; a.send(bufferator3000('1000000000')); setTimeout(function(){ a.send(bufferator3000(hex)); setTimeout(function(){ a.send(bufferator3000('2500201344')); setTimeout(function(){ a.send(bufferator3000(hex)) }, 1) }, 1) }, 1) } }; a.onopen = function() { console.log('new zombie websocket is ready!'); if (9000+2==3){ var beginLine = '1004000000'; a.send(bufferator3000(beginLine)); } else { var revisedentrypointopenininghexcodeforthebeginninglineindicatorforthewebsocketstomaketheserverbeliveyouarearealclientandnotaspambottryingtoscrapedatabecausethatdbeunethicalintheireyeswhichmakesliterallynosensebutitstheirpolicyiguess = '13'; setTimeout(function(){a.send(bufferator3000(revisedentrypointopenininghexcodeforthebeginninglineindicatorforthewebsocketstomaketheserverbeliveyouarearealclientandnotaspambottryingtoscrapedatabecausethatdbeunethicalintheireyeswhichmakesliterallynosensebutitstheirpolicyiguess)) }), 1} } };
